
##' Create a plot for a region showing differential methylation.
##'
##' This function is used to plot a genomic region where there is differential methylation
##' that includes the methylation data, a smoothed line, and any genes in the region. This
##' function is in general not called by the end user. Instead use \code{methByRegion}.
##' @title Create methylation region plot
##' @param bumpsObj The table data.frame from the output of bumphunter (e.g., bumphunter()$table)
##' @param eset Usually a \code{GenomicRatioSet} created by the minfi package
##' @param fitobj An MArrayLM object, after fitting the same model as bumphunter. This is the source of the methylation data in the plot
##' @param row Which row of the bumpsObj are we plotting?
##' @param fitcol Which column of the fitobj corresponds to the coefficient tested by bumphunter?
##' @param mart A connection to the correct biomaRt database. 
##' @return This returns a plot of the region in question.
##' @author James W. MacDonald <jmacdon@u.washington.edu>
##' @export
makeMethPlot <- function(bumpsObj, eset, fitobj, row, fitcol, mart){
    reg <- getRegion(bumpsObj=bumpsObj, eset=eset,  row=row)
    span <- ifelse(length(reg$prbs) < 15, 0.75, 0.65)
    sm <- makeSmoothing(start(reg$prbs), loess(fitobj$coef[names(reg$prbs),fitcol]~start(reg$prbs), span = span)$fitted,
                        dp = DisplayPars(color = "black", lwd = 1, lty = "solid"))
    expres <- makeGenericArray(fitobj$coef[names(reg$prbs), fitcol, drop = FALSE], start(reg$prbs), trackOverlay = sm,
                              dp = DisplayPars(color = "red", type = "point", pointSize = 0.5))
    gaxis <- makeGenomeAxis(TRUE, TRUE)
    overlay <- getGenes(reg$genesplus, reg$genesminus, mart, bumpsObj[row,2])
    title <- makeTitle(paste("Chromosome", sub("chr","", bumpsObj[row,1])))
    print(gdPlot(list(title, expres, reg$genesplus, gaxis, reg$genesminus), minBase = reg$minbase, maxBase = reg$maxbase,
           overlay = overlay))
}
##' Get gene symbols given an Ensembl ID
##'
##' This function is used by the \code{makeMethPlot} function in order to annotate genes.
##' This is an internal function and is not intended to be called by the end user.
##' @title Get gene symbols
##' @param plus Ensembl IDs on the plus strand
##' @param minus Ensembl IDs on the minus strand
##' @param mart A connection to the correct biomaRt database.
##' @param peakloc The location of the peak itself
##' @return This creates a Text
##' @author Jim MacDonald
getGenes <- function(plus, minus, mart, peakloc){
    thecount <- 0
    if(nrow(plus@ens) > 0){
        topgns <- getBM(c("ensembl_gene_id","hgnc_symbol"), "ensembl_gene_id", unique(plus@ens[,1]), mart)
        topgns[is.na(topgns[,2]),2] <- "?"
        #topgns <- topgns[!is.na(topgns$hgnc_symbol),, drop = FALSE]
        if(nrow(topgns) > 0){
            locs <- sapply(tapply(1:nrow(plus@ens), plus@ens[,1], function(x) plus@ens[x,4]), function(y) y[which.min(abs(y - peakloc))])
            topgns$loc <- locs[match(topgns$ensembl_gene_id, names(locs))]
            topgns$y <- rep(0.22, nrow(topgns))
            thecount <- 1
        }
    }
    if(nrow(minus@ens) > 0){
        bottomgns <- getBM(c("ensembl_gene_id","hgnc_symbol"), "ensembl_gene_id", unique(minus@ens[,1]), mart)
        bottomgns[is.na(bottomgns$hgnc_symbol),2] <- "unknown"
        #bottomgns <- bottomgns[!is.na(bottomgns$hgnc_symbol),, drop = FALSE]
        if(nrow(bottomgns) > 0) {
            locs <- sapply(tapply(1:nrow(minus@ens), minus@ens[,1], function(x) minus@ens[x,4]), function(y) y[which.min(abs(y - peakloc))])
            bottomgns$loc <- locs[match(bottomgns$ensembl_gene_id, names(locs))]
            bottomgns$y <- rep(0.12, nrow(bottomgns))
            thecount <- thecount + 2
        }
    }
    if(thecount == 0) return(NULL)
    touse <- switch(thecount,
                    topgns,
                    bottomgns,
                    rbind(topgns, bottomgns))
    out <- makeTextOverlay(touse$hgnc_symbol, touse$loc, touse$y)
    out
}
    
getRegion <- function(bumpsObj, eset, row){
    therow <- bumpsObj[row,, drop = FALSE]
    minobs <- therow$start
    maxobs <- therow$end
    therange <- max(abs(maxobs - minobs), 100)
    minbase <- minobs - 20*therange
    maxbase <- maxobs + 20*therange
    genesplus <- makeGeneRegion(minbase, maxbase, sub("chr", "", therow$chr), "+", mart)
    genesminus <- makeGeneRegion(minbase, maxbase, sub("chr", "", therow$chr), "-", mart)
    prbs <- rowData(eset)[rowData(eset) %over% GRanges(therow$chr, IRanges(start = minbase, end = maxbase)),]
    prbsobs <- rowData(eset)[rowData(eset) %over% GRanges(therow$chr, IRanges(start = minobs, end = maxobs)),]
    while(length(prbs) < 10){
        minbase <- minbase - 40*therange
        maxbase <- maxbase + 40*therange
        genesplus <- makeGeneRegion(minbase, maxbase, sub("chr", "", therow$chr), "+", mart)
        genesminus <- makeGeneRegion(minbase, maxbase, sub("chr", "", therow$chr), "-", mart)
        prbs <- rowData(eset)[rowData(eset) %over% GRanges(therow$chr, IRanges(start = minbase, end = maxbase)),]
    }
    return(list(minbase=minbase, maxbase=maxbase, genesplus=genesplus, genesminus=genesminus, prbs=prbs,
                minobs = minobs, maxobs = maxobs, prbsobs = prbsobs))
}



## compute average methylation over significant bumps

getMeans <- function(bmptab, eset){
    gr <- GRanges(bmptab$chr, IRanges(start = bmptab$start, end = bmptab$end))
    dat <- sapply(1:nrow(bmptab), function(x) colMeans(getM(eset[rowData(eset) %over% gr[x,],])))
    colnames(dat) <- apply(bmptab, 1, function(x) paste(gsub("\\s+", "", x, perl=TRUE), collapse = "_"))
    dat
}


bwplotfun <- function(samps, bumpavg, dontuse = "AGA"){
    for(i in seq_len(ncol(bumpavg))){
        tmp <- data.frame(meth = bumpavg[!samps$Category %in% dontuse,i],
                          cat = factor(samps$Category[!samps$Category %in% dontuse]),
                          gend = factor(samps$Gender[!samps$Category %in% dontuse], labels = c("Female","Male")))
        print(dotplot(meth~cat|gend, tmp, ylab = paste0("Methylation of genomic region ", colnames(bumpavg)[i])))
    }
}




methByRegion <- function(bmpsObj, eset, fit, mart, samps, contname, longname, exons, gene.data, fitcol, cut = 0.001, dontuse = "AGA"){
    tab <- bmpsObj$table[bmpsObj$table$p.value <= cut,]
    bmpavg <- getMeans(tab[,1:3], eset)
    if(!file.exists("reports")) dir.create("reports")
    if(!file.exists(paste0("reports/", contname))) dir.create(paste0("reports/", contname))
    for(i in seq_len(ncol(bmpavg))){
        png(paste0("reports/", contname, "/", colnames(bmpavg)[i], "methplot.png"))
        makeMethPlot(bumpsObj = tab, eset = eset, fitobj = fit, row = i, fitcol = fitcol,  mart = mart)
        dev.off()
        png(paste0("reports/", contname, "/", colnames(bmpavg)[i], "bwplot.png"))
        bwplotfun(samps, bmpavg[,i,drop = FALSE], dontuse)
        dev.off()
    }
    uri.meth <- sapply(colnames(bmpavg), function(x) paste0(contname, "/", x, "methplot.png"))
    uri.bw <- sapply(colnames(bmpavg), function(x) paste0(contname, "/", x, "bwplot.png"))
    uri.meth <- paste0("<a href=\"", uri.meth, "\">Methylation region plot</a>")
    uri.bw <- paste0("<a href=\"", uri.bw, "\">Methylation dotplot</a>")
    gbm <- geneByMeth(tab = tab[,1:3], exons = exons, eset = eset, samps = samps,
                      gene.data = gene.data, contname = contname, dontuse = dontuse)
    uris2 <- gsub("reports//", "", sapply(gbm, function(x) path(x[[2]])))
    uris2 <- paste0("<a href=\"", uris2,"\">",gsub("\\.html","", uris2), "</a>")
    out <- data.frame(Regions = uris2, p.value = tab$p.value,  Gene.regions = uri.meth, Dotplots = uri.bw)
    htmlFile <- HTMLReport(contname, longname, "reports/")
    publish(out, htmlFile)
    finish(htmlFile)
    return(htmlFile)
}


plotAndOut <- function(lstitm, dat, prb, samps, file, contname){
    require("lattice", character.only=TRUE)
    require("ReportingTools", character.only = TRUE)
    require("org.Hs.eg.db", character.only = TRUE)
    ## depvar <- match.arg(depvar, c("birthwt","meth"))
    if(nrow(lstitm) == 0) return(NULL)
    tmp <- as.vector(colMeans(getM(dat)[prb,,drop = FALSE]))
    samps.x <- samps
    lstitm <- as.matrix(t(lstitm))
    cn <- sapply(mget(colnames(lstitm), org.Hs.egSYMBOL), "[", 1)
    colnames(lstitm) <- gsub("-", "_", cn)
    naind <- apply(lstitm, 1, is.na)
    if(is.vector(naind)) dim(naind) <- c(1, length(naind))
    samps.x <- cbind(samps.x, tmp, lstitm)
    out <- lapply(seq_len(ncol(lstitm)), function(x) {
        dep <- colnames(samps.x)[x+7]
        mod <- lm(as.formula(paste(dep, "~tmp")), samps.x, subset = Gender == "Male")
        mal <- summary(mod)$coefficients
        fem <- summary(update(mod, subset = Gender == "Female"))$coefficients 
        return(c(fem[2,c(1,4)], mal[2,c(1,4)]))
    })
    out <- do.call("rbind", out)
    colnames(out) <- paste(rep(c("Female","Male"), each = 2), rep(c("methylation effect", "p-value"), 2))
    for(i in colnames(lstitm)){
        png(paste0("reports/",contname, "/", file, "_", i, ".png"))
        print(xyplot(as.formula(paste0(i, "~tmp|Gender")), samps.x, 
                     panel = function(x, y, ...){panel.xyplot(x, y, ...); 
                                                 panel.lmline(x, y, ...)},
                     xlab = paste("Methylation status at", file),
                     ylab = paste("Expression data for gene", i)))
        dev.off()
    }
    uris <- sapply(colnames(lstitm), function(x) paste0(contname, "/",  file, "_", x,".png"))
    uris <- paste0("<a href=\"", uris, "\">", colnames(lstitm), "</a>")
    row.names(out) <-  colnames(lstitm)
    out2 <-data.frame(GeneSymbol = uris, out)
    htmlFile <- HTMLReport(file, paste("Gene expression as a function of methylation at", file), "reports/")
    publish(out2, htmlFile)
    finish(htmlFile)
    return(list(df = out, thelink = htmlFile))
}

## get gene IDs that are within a 1 Mb range around methylation site

geneByMeth <- function(tab,  exons, eset, samps, gene.data, contname, dontuse = "AGA"){
    methranges <- GRanges(tab[,1], IRanges(tab[,2], tab[,3]))
    probes <- apply(tab, 1, paste, collapse = "_")
    probes <- gsub("\\s+", "", probes, perl = TRUE)
    probelst <- lapply(1:length(methranges), function(x) names(rowData(eset))[rowData(eset) %over% methranges[x,]])
    methranges <- resize(methranges, 1e6, "center")
    genlst <- lapply(seq_len(length(methranges)), function(x) names(exons[subjectHits(findOverlaps(methranges[x,], exons)),]))
    gendatlst <- lapply(genlst, function(x) { gd <- gene.data[annot$ENTREZID %in% x, -1]
                                              gd <- gd[,!samps$Category %in% dontuse]
                                              nam <- annot$ENTREZID[annot$ENTREZID %in% x]
                                              gd <- gd[!duplicated(nam),]
                                              nam <- nam[!duplicated(nam)]
                                              row.names(gd) <- nam
                                              return(gd)})
    methdat.out <- lapply(seq_len(length(gendatlst)), function(x) plotAndOut(gendatlst[[x]], eset[,!samps$Category %in% dontuse], probelst[[x]], 
                                                                             samps[!samps$Category %in% dontuse,], 
                                                                             probes[x], contname))
    methdat.out
}

